const PASSWORD = "nhothoang@1994";
let isAuthenticated = false;

const passwordTranslations = {
  vi: {
    'password-title': 'üîí Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ xem CV',
    'password-subtitle': 'Enter password to view CV',
    'password-placeholder': 'Nh·∫≠p m·∫≠t kh·∫©u...',
    'submit-text': 'X√°c nh·∫≠n',
    'error-text': 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!'
  },
  en: {
    'password-title': 'üîí Enter password to view CV',
    'password-subtitle': 'Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ xem CV',
    'password-placeholder': 'Enter password...',
    'submit-text': 'Submit',
    'error-text': 'Incorrect password!'
  }
};

// Language and theme data
const translations = {
  vi: {
    // Header
    'cv-title': 'CV ‚Äì NGUY·ªÑN NHO THO√ÅNG',
    'fullname-label': 'H·ªç t√™n:',
    'birthday-label': 'Ng√†y sinh:',
    'email-label': 'Email:',
    'phone-label': 'ƒêi·ªán tho·∫°i:',
    'github-label': 'GitHub:',
    'avatar-alt': '·∫¢nh c√° nh√¢n',
    
    // Sections
    'summary-title': 'üë®‚Äçüíª T√≥m t·∫Øt chuy√™n m√¥n',
    'summary-content': 'K·ªπ s∆∞ CNTT v·ªõi 7 nƒÉm kinh nghi·ªám l√†m vi·ªác t·∫°i <strong>Samsung</strong> trong m·∫£ng <strong>Cloud Platform</strong> v√† <strong>Software Quality Engineering</strong>. Th√†nh th·∫°o c√°c c√¥ng ngh·ªá <strong>DevOps</strong> (AWS, Docker, Kubernetes, Terraform, CI/CD), c√≥ kinh nghi·ªám v·ªÅ <strong>t·ª± ƒë·ªông h√≥a ki·ªÉm th·ª≠</strong> (Selenium, Appium, Uiautomator2, AI-based automation), v√† x√¢y d·ª±ng <strong>AI Agent</strong> ph·ª•c v·ª• t·ª± ƒë·ªông h√≥a v√† h·ªó tr·ª£ c√¥ng vi·ªác. C√≥ kh·∫£ nƒÉng ph√°t tri·ªÉn <strong>backend (FastAPI, Flask)</strong> v√† <strong>frontend (React, HTML, CSS, JavaScript)</strong>. Linh ho·∫°t trong vi·ªác h·ªçc v√† ·ª©ng d·ª•ng c√¥ng ngh·ªá m·ªõi, c√≥ kinh nghi·ªám l√†m vi·ªác trong c√°c d·ª± √°n quy m√¥ l·ªõn v√† m√¥i tr∆∞·ªùng √°p l·ª±c cao.',
    
    'experience-title': 'üíº Kinh nghi·ªám l√†m vi·ªác',
    'job-title': 'K·ªπ s∆∞ Cloud Platform | Samsung SVMC (nay l√† Samsung SRV) | 2017 ‚Äì 2022',
    'monitoring-title': 'D·ªãch v·ª• gi√°m s√°t h·ªá th·ªëng (AWS & On-Premise)',
    'monitoring-list': [
      'Tri·ªÉn khai v√† qu·∫£n l√Ω h·ªá th·ªëng gi√°m s√°t to√†n c·∫ßu b·∫±ng <strong>Grafana</strong> v√† <strong>Prometheus</strong>.',
      'X√¢y d·ª±ng h·ªá th·ªëng c·∫£nh b√°o t·ª± ƒë·ªông (Warning, Critical) t√≠ch h·ª£p <strong>Alarm & Auto-healing</strong>.',
      'X·ª≠ l√Ω s·ª± c·ªë nhanh ch√≥ng, ƒë·∫£m b·∫£o t√≠nh ·ªïn ƒë·ªãnh cho c√°c d·ªãch v·ª• quan tr·ªçng.',
      'Th√†nh th·∫°o trong vi·ªác tri·ªÉn khai ·ª©ng d·ª•ng b·∫±ng <strong>Docker, Kubernetes, Ansible, Terraform, Jenkins, GitLab</strong> tr√™n c·∫£ m√¥i tr∆∞·ªùng Cloud v√† On-Premise.'
    ],
    'automation-title': 'T·ª± ƒë·ªông h√≥a ki·ªÉm th·ª≠ (Selenium, Appium, Uiautomator2, AI-based)',
    'automation-list': [
      'Ph√°t tri·ªÉn v√† b·∫£o tr√¨ script t·ª± ƒë·ªông cho c√°c n·ªÅn t·∫£ng <strong>Samsung Developer</strong> v√† <strong>Tizen Developer</strong>.',
      'X√¢y d·ª±ng framework t·ª± ƒë·ªông ki·ªÉm th·ª≠ ·ª©ng d·ª•ng di ƒë·ªông (<strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>ADB</strong>) ch·∫°y sau Pull Request.',
      'T·ª± ƒë·ªông ch·∫°y test case, thu th·∫≠p k·∫øt qu·∫£ v√† t·∫°o b√°o c√°o ki·ªÉm th·ª≠.'
    ],
    'sqe-title': 'Software Quality Engineering (SQE)',
    'sqe-list': [
      'Th·ª±c hi·ªán ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm cho c√°c s·∫£n ph·∫©m Samsung tr∆∞·ªõc khi ph√°t h√†nh.',
      'X√¢y d·ª±ng framework ki·ªÉm th·ª≠ t·ª± ƒë·ªông tr√™n nhi·ªÅu thi·∫øt b·ªã v·ªõi <strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>STP</strong>, <strong>ACT</strong>.'
    ],
    'ai-title': 'Nghi√™n c·ª©u v√† ·ª©ng d·ª•ng AI n·ªôi b·ªô',
    'ai-list': [
      'Nghi√™n c·ª©u hu·∫•n luy·ªán v√† tinh ch·ªânh m√¥ h√¨nh AI ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ t·ª± ƒë·ªông h√≥a.',
      '·ª®ng d·ª•ng <strong>RAG</strong>, <strong>MCP</strong>, <strong>LLM</strong> h·ªó tr·ª£ quy tr√¨nh ki·ªÉm th·ª≠ v√† truy xu·∫•t d·ªØ li·ªáu n·ªôi b·ªô.',
      'X√¢y d·ª±ng nguy√™n m·∫´u chatbot h·ªó tr·ª£ tra c·ª©u t√†i li·ªáu ki·ªÉm th·ª≠ n·ªôi b·ªô (tri·ªÉn khai fullstack backend + frontend).'
    ],
    // Job 2022 - now (Vietnamese)
    'job2-title': 'K·ªπ s∆∞ Ki·ªÉm th·ª≠ Ph·∫ßn m·ªÅm | Samsung SRV | 2022 ‚Äì nay',
    'job2-automation-title': 'T·ª± ƒë·ªông h√≥a ki·ªÉm th·ª≠ (Selenium, Appium, Uiautomator2, AI-based)',
    'job2-automation-list': [
      'Ph√°t tri·ªÉn v√† b·∫£o tr√¨ script t·ª± ƒë·ªông cho c√°c n·ªÅn t·∫£ng <strong>Samsung Developer</strong> v√† <strong>Tizen Developer</strong>.',
      'X√¢y d·ª±ng framework t·ª± ƒë·ªông ki·ªÉm th·ª≠ ·ª©ng d·ª•ng di ƒë·ªông (<strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>ADB</strong>) ch·∫°y sau Pull Request.',
      'T·ª± ƒë·ªông ch·∫°y test case, thu th·∫≠p k·∫øt qu·∫£ v√† t·∫°o b√°o c√°o ki·ªÉm th·ª≠.'
    ],
    'job2-sqe-title': 'Software Quality Engineering (SQE)',
    'job2-sqe-list': [
      'Th·ª±c hi·ªán ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm cho c√°c s·∫£n ph·∫©m Samsung tr∆∞·ªõc khi ph√°t h√†nh.',
      'X√¢y d·ª±ng framework ki·ªÉm th·ª≠ t·ª± ƒë·ªông tr√™n nhi·ªÅu thi·∫øt b·ªã v·ªõi <strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>STP</strong>, <strong>ACT</strong>.'
    ],
    'job2-ai-title': 'Nghi√™n c·ª©u v√† ·ª©ng d·ª•ng AI n·ªôi b·ªô',
    'job2-ai-list': [
      'Nghi√™n c·ª©u hu·∫•n luy·ªán v√† tinh ch·ªânh m√¥ h√¨nh AI ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ t·ª± ƒë·ªông h√≥a.',
      '·ª®ng d·ª•ng <strong>RAG</strong>, <strong>MCP</strong>, <strong>LLM</strong> h·ªó tr·ª£ quy tr√¨nh ki·ªÉm th·ª≠ v√† truy xu·∫•t d·ªØ li·ªáu n·ªôi b·ªô.',
      'X√¢y d·ª±ng nguy√™n m·∫´u chatbot h·ªó tr·ª£ tra c·ª©u t√†i li·ªáu ki·ªÉm th·ª≠ n·ªôi b·ªô (tri·ªÉn khai fullstack backend + frontend).'
    ],
    
    'projects-title': 'üìÇ D·ª± √°n c√° nh√¢n',
    'projects-list': [
      '<strong>AI Chatbot tra c·ª©u t√†i li·ªáu (RAG-based)</strong><br>X√¢y d·ª±ng chatbot n·ªôi b·ªô gi√∫p nh√¢n vi√™n tra c·ª©u t√†i li·ªáu k·ªπ thu·∫≠t v√† h·ªó tr·ª£ kh·∫Øc ph·ª•c s·ª± c·ªë.',
      '<strong>DevOps AI Agent (T·ª± ƒë·ªông h√≥a AWS)</strong><br>Ph√°t tri·ªÉn AI Agent c√≥ kh·∫£ nƒÉng t∆∞∆°ng t√°c v·ªõi <strong>AWS (EC2, S3, ECR, IAM, v.v.)</strong>, t·ª± ƒë·ªông ki·ªÉm tra m√¥i tr∆∞·ªùng v√† h·ªó tr·ª£ tri·ªÉn khai CI/CD.',
      '<strong>Testing AI Agent (Ki·ªÉm th·ª≠ t·ª± ƒë·ªông tr√™n ƒëi·ªán tho·∫°i)</strong><br>X√¢y d·ª±ng agent h·ªó tr·ª£ ch·∫°y test case t·ª± ƒë·ªông tr√™n thi·∫øt b·ªã Android th√¥ng qua <strong>Appium</strong> v√† <strong>Uiautomator2</strong>, t·ª± ƒë·ªông ghi log v√† t·∫°o b√°o c√°o k·∫øt qu·∫£.',
      '<strong>Sales Chatbot</strong><br>Chatbot h·ªó tr·ª£ t∆∞ v·∫•n s·∫£n ph·∫©m, tr·∫£ l·ªùi c√¢u h·ªèi kh√°ch h√†ng v√† g·ª£i √Ω mua h√†ng ‚Äî ·ª©ng d·ª•ng ki·∫øn tr√∫c <strong>LLM + RAG</strong>.',
      '<strong>Healthcare Chatbot</strong><br>X√¢y d·ª±ng chatbot cung c·∫•p th√¥ng tin s·ª©c kh·ªèe, tra c·ª©u thu·ªëc, v√† h·ªó tr·ª£ ƒë·∫∑t l·ªãch kh√°m, d·ª±a tr√™n d·ªØ li·ªáu y t·∫ø v√† m√¥ h√¨nh LLM.',
      'C√°c <strong>d·ª± √°n DevOps & Automation kh√°c</strong> ƒë∆∞·ª£c chia s·∫ª tr√™n GitHub:<br>üëâ <a href="https://github.com/NhoThoang" target="_blank" rel="noopener">https://github.com/NhoThoang</a>'
    ],
    
    'education-title': 'üéì H·ªçc v·∫•n',
    'university': '<strong>ƒê·∫°i h·ªçc ƒêi·ªán l·ª±c | 2010 ‚Äì 2015</strong>',
    'education-list': [
      'Chuy√™n ng√†nh: C∆° ƒëi·ªán t·ª≠',
      'X·∫øp lo·∫°i: Gi·ªèi'
    ],
    
    'skills-title': 'üõ† K·ªπ nƒÉng',
    'skills-list': [
      '<strong>DevOps & Cloud:</strong> AWS, Kubernetes, Terraform, Ansible, Docker, Jenkins, GitLab',
      '<strong>Automation Testing:</strong> Selenium, Appium, Uiautomator2',
      '<strong>Ng√¥n ng·ªØ l·∫≠p tr√¨nh:</strong> Python',
      '<strong>Backend:</strong> FastAPI, Flask',
      '<strong>Frontend:</strong> React, HTML, CSS, JavaScript',
      '<strong>C∆° s·ªü d·ªØ li·ªáu:</strong> MySQL, PostgreSQL, MongoDB',
      '<strong>AI & Machine Learning:</strong> LLMs, RAG, Fine-tuning, Model Deployment'
    ],
    
    'objective-title': 'üéØ M·ª•c ti√™u ngh·ªÅ nghi·ªáp',
    'objective-list': [
      'L√†m vi·ªác trong m√¥i tr∆∞·ªùng chuy√™n nghi·ªáp, s√°ng t·∫°o v√† hi·ªán ƒë·∫°i.',
      'Tham gia ph√°t tri·ªÉn c√°c d·ª± √°n c√≥ t√°c ƒë·ªông th·ª±c t·∫ø l·ªõn.',
      'Kh√¥ng ng·ª´ng h·ªçc h·ªèi, chinh ph·ª•c th·ª≠ th√°ch v√† n√¢ng cao nƒÉng l·ª±c k·ªπ thu·∫≠t c√° nh√¢n.'
    ]
  },
  en: {
    // Header
    'cv-title': 'CV ‚Äì NGUY·ªÑN NHO THO√ÅNG',
    'fullname-label': 'Full Name:',
    'birthday-label': 'Date of Birth:',
    'email-label': 'Email:',
    'phone-label': 'Phone:',
    'github-label': 'GitHub:',
    'avatar-alt': 'Personal Photo',
    
    // Sections
    'summary-title': 'üë®‚Äçüíª Professional Summary',
    'summary-content': 'IT Engineer with 7 years of experience in <strong>Cloud Platform</strong> and <strong>Software Quality Engineering</strong> at Samsung. Proficient in <strong>DevOps technologies</strong> (AWS, Docker, Kubernetes, Terraform, CI/CD), experienced in <strong>automation testing</strong> (Selenium, Appium, Uiautomator2, AI-based automation), and building <strong>AI Agents</strong> for automation and integration. Strong skills in <strong>backend (FastAPI, Flask)</strong> and <strong>frontend (React, HTML, CSS, JavaScript)</strong> development. Capable of adapting quickly to new technologies and delivering high-quality solutions in large-scale, high-pressure environments.',
    
    'experience-title': 'üíº Work Experience',
    'job-title': 'Cloud Platform Engineer | Samsung SVMC (now Samsung SRV) | 2017 ‚Äì 2022',
    'monitoring-title': 'Monitoring Service (AWS & On-Premise)',
    'monitoring-list': [
      'Deployed and managed global monitoring systems using <strong>Grafana</strong> and <strong>Prometheus</strong>.',
      'Developed automated alert systems (Warning, Critical) integrated with <strong>Alarm & Auto-healing</strong> mechanisms.',
      'Handled incident response for large-scale services to ensure high availability and stability.',
      'Experienced with <strong>Docker, Kubernetes, Ansible, Terraform, Jenkins, GitLab</strong> for CI/CD and multi-environment deployments.'
    ],
    'automation-title': 'Automation Testing (Selenium, Appium, Uiautomator2, AI-based Automation)',
    'automation-list': [
      'Developed and maintained automated test scripts for <strong>Samsung Developer</strong> and <strong>Tizen Developer</strong> platforms.',
      'Built automation frameworks for mobile app testing triggered after Pull Requests using <strong>Appium</strong>, <strong>Uiautomator2</strong>, and <strong>ADB</strong>.',
      'Maintained test cases, generated automated reports, and improved test coverage.'
    ],
    'sqe-title': 'Software Quality Engineering (SQE)',
    'sqe-list': [
      'Conducted pre-release software validation for Samsung products.',
      'Designed automation frameworks running across multiple devices using <strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>STP</strong>, <strong>ACT</strong>.'
    ],
    'ai-title': 'AI Research & Internal Applications',
    'ai-list': [
      'Researched and fine-tuned AI models to improve automation workflows.',
      'Experimented with <strong>RAG</strong>, <strong>MCP</strong>, and <strong>LLM</strong> to assist testing and data retrieval tasks.',
      'Built an AI-powered chatbot prototype to support internal testing documentation lookup (fullstack deployment: backend + frontend).'
    ],
    // Job 2022 - now (English)
    'job2-title': 'Software Test Engineer | Samsung SRV | 2022 ‚Äì Present',
    'job2-automation-title': 'Automation Testing (Selenium, Appium, Uiautomator2, AI-based)',
    'job2-automation-list': [
      'Developed and maintained automated test scripts for <strong>Samsung Developer</strong> and <strong>Tizen Developer</strong> platforms.',
      'Built automation frameworks for mobile app testing triggered after Pull Requests using <strong>Appium</strong>, <strong>Uiautomator2</strong>, and <strong>ADB</strong>.',
      'Automated test case execution, collected results and produced test reports.'
    ],
    'job2-sqe-title': 'Software Quality Engineering (SQE)',
    'job2-sqe-list': [
      'Performed pre-release software validation for Samsung products.',
      'Designed automation frameworks running across multiple devices using <strong>Appium</strong>, <strong>Uiautomator2</strong>, <strong>STP</strong>, <strong>ACT</strong>.'
    ],
    'job2-ai-title': 'AI Research & Internal Applications',
    'job2-ai-list': [
      'Researched and fine-tuned AI models to improve automation workflows.',
      'Applied <strong>RAG</strong>, <strong>MCP</strong>, and <strong>LLM</strong> techniques to support testing and internal data retrieval.',
      'Built a prototype chatbot for internal testing documentation lookup (fullstack deployment: backend + frontend).'
    ],
    
    'projects-title': 'üìÇ Personal Projects',
    'projects-list': [
      '<strong>AI Chatbot (RAG-based)</strong><br>Developed a chatbot to assist employees in document lookup and troubleshooting through a RAG (Retrieval-Augmented Generation) pipeline.',
      '<strong>DevOps AI Agent (AWS Automation)</strong><br>Built an AI agent capable of interacting with <strong>AWS services</strong> (EC2, S3, ECR, IAM, etc.), performing automated environment checks and CI/CD workflows.',
      '<strong>Testing AI Agent (Mobile Automation)</strong><br>Developed an agent that runs automated test cases on Android devices using <strong>Appium</strong> and <strong>Uiautomator2</strong>, collects results, and generates test reports.',
      '<strong>Sales Chatbot</strong><br>Designed a chatbot that assists in product recommendation, customer Q&A, and order-related interactions ‚Äî built using LLM + RAG architecture.',
      '<strong>Healthcare Chatbot</strong><br>Created a prototype chatbot that provides basic medical information, symptom lookup, and appointment booking suggestions using medical data with RAG.',
      'Additional <strong>DevOps & Automation projects</strong> are available on GitHub:<br>üëâ <a href="https://github.com/NhoThoang" target="_blank" rel="noopener">https://github.com/NhoThoang</a>'
    ],
    
    'education-title': 'üéì Education',
    'university': '<strong>Electric Power University | 2010 ‚Äì 2015</strong>',
    'education-list': [
      'Major: Mechatronics Engineering',
      'GPA: Good'
    ],
    
    'skills-title': 'üõ† Skills',
    'skills-list': [
      '<strong>DevOps & Cloud:</strong> AWS, Kubernetes, Terraform, Ansible, Docker, Jenkins, GitLab',
      '<strong>Automation Testing:</strong> Selenium, Appium, Uiautomator2',
      '<strong>Programming:</strong> Python',
      '<strong>Backend:</strong> FastAPI, Flask',
      '<strong>Frontend:</strong> React, HTML, CSS, JavaScript',
      '<strong>Database:</strong> MySQL, PostgreSQL, MongoDB',
      '<strong>AI & ML:</strong> LLMs, RAG, Fine-tuning, Model Deployment'
    ],
    
    'objective-title': 'üéØ Career Objective',
    'objective-list': [
      'To work in a professional and innovative environment.',
      'To contribute to real-world, high-impact projects shaping modern technology products.',
      'To continuously grow as an engineer by building and integrating intelligent systems.'
    ]
  }
};

// Current language and theme state
let currentLanguage = 'en';
let currentTheme = 'dark';

document.addEventListener('DOMContentLoaded', function onReady() {
  // Check if user is already authenticated
  const savedAuth = localStorage.getItem('cv_authenticated');
  if (savedAuth === 'true') {
    isAuthenticated = true;
    showCVContent();
  } else {
    showPasswordModal();
  }

  // Set current year
  var yearEl = document.getElementById('year');
  if (yearEl) {
    yearEl.textContent = String(new Date().getFullYear());
  }

  // Initialize language and theme from localStorage
  const savedLanguage = localStorage.getItem('language') || 'en';
  const savedTheme = localStorage.getItem('theme') || 'dark';
  
  currentLanguage = savedLanguage;
  currentTheme = savedTheme;
  
  // Apply saved settings
  applyLanguage(currentLanguage);
  applyTheme(currentTheme);
  
  // Set up event listeners
  setupEventListeners();
  setupPasswordProtection();
});

function setupEventListeners() {
  // Language toggle
  const languageToggle = document.getElementById('language-toggle');
  if (languageToggle) {
    languageToggle.addEventListener('click', toggleLanguage);
  }
  
  // Theme toggle
  const themeToggle = document.getElementById('theme-toggle');
  if (themeToggle) {
    themeToggle.addEventListener('click', toggleTheme);
  }
}

function toggleLanguage() {
  currentLanguage = currentLanguage === 'en' ? 'vi' : 'en';
  applyLanguage(currentLanguage);
  localStorage.setItem('language', currentLanguage);
}

function toggleTheme() {
  currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
  applyTheme(currentTheme);
  localStorage.setItem('theme', currentTheme);
}

function applyLanguage(lang) {
  const langData = translations[lang];
  if (!langData) return;
  
  // Update all text elements
  Object.keys(langData).forEach(key => {
    const element = document.getElementById(key);
    if (element) {
      if (key.includes('list')) {
        // Handle list elements
        const listItems = langData[key];
        element.innerHTML = listItems.map(item => `<li>${item}</li>`).join('');
      } else {
        element.innerHTML = langData[key];
      }
    }
  });
  
  // Update language button text
  const langText = document.getElementById('lang-text');
  if (langText) {
    langText.textContent = lang === 'en' ? 'VI' : 'EN';
  }
}

function applyTheme(theme) {
  document.documentElement.setAttribute('data-theme', theme);
  
  // Update theme button icon
  const themeIcon = document.getElementById('theme-icon');
  if (themeIcon) {
    themeIcon.textContent = theme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
  }
}

// Password protection functions
function setupPasswordProtection() {
  const passwordInput = document.getElementById('password-input');
  const passwordSubmit = document.getElementById('password-submit');
  const passwordError = document.getElementById('password-error');

  if (passwordSubmit) {
    passwordSubmit.addEventListener('click', handlePasswordSubmit);
  }

  if (passwordInput) {
    passwordInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        handlePasswordSubmit();
      }
    });
  }
}

function showPasswordModal() {
  document.body.classList.add('password-protected');
  const modal = document.getElementById('password-modal');
  if (modal) {
    modal.classList.remove('hidden');
    // Focus on password input
    const passwordInput = document.getElementById('password-input');
    if (passwordInput) {
      setTimeout(() => passwordInput.focus(), 100);
    }
  }
  updatePasswordModalLanguage();
}

function hidePasswordModal() {
  const modal = document.getElementById('password-modal');
  if (modal) {
    modal.classList.add('hidden');
  }
  document.body.classList.remove('password-protected');
}

function showCVContent() {
  hidePasswordModal();
  isAuthenticated = true;
  localStorage.setItem('cv_authenticated', 'true');
}

function handlePasswordSubmit() {
  const passwordInput = document.getElementById('password-input');
  const passwordError = document.getElementById('password-error');
  const passwordSubmit = document.getElementById('password-submit');
  
  if (!passwordInput || !passwordError || !passwordSubmit) return;

  const enteredPassword = passwordInput.value.trim();
  
  // Disable submit button during processing
  passwordSubmit.disabled = true;
  passwordSubmit.innerHTML = '<span>ƒêang x√°c th·ª±c...</span>';

  // Simulate a small delay for better UX
  setTimeout(() => {
    if (enteredPassword === PASSWORD) {
      // Correct password
      passwordError.style.display = 'none';
      passwordInput.value = '';
      showCVContent();
    } else {
      // Wrong password
      passwordError.style.display = 'block';
      passwordInput.value = '';
      passwordInput.focus();
      
      // Shake animation
      passwordError.style.animation = 'none';
      setTimeout(() => {
        passwordError.style.animation = 'errorShake 0.5s ease-in-out';
      }, 10);
    }
    
    // Re-enable submit button
    passwordSubmit.disabled = false;
    updatePasswordModalLanguage();
  }, 500);
}

function updatePasswordModalLanguage() {
  const langData = passwordTranslations[currentLanguage];
  if (!langData) return;

  // Update password modal text
  Object.keys(langData).forEach(key => {
    const element = document.getElementById(key);
    if (element) {
      if (key === 'password-placeholder') {
        element.placeholder = langData[key];
      } else {
        element.textContent = langData[key];
      }
    }
  });
}

// Override the existing applyLanguage function to include password modal
const originalApplyLanguage = applyLanguage;
applyLanguage = function(lang) {
  originalApplyLanguage(lang);
  updatePasswordModalLanguage();
};

